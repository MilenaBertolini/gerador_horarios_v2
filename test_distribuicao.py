import random

professores = [
    "Prof. Carla", "Prof. Bruno", "Prof. Camila", "Prof. Daniel",
    "Prof. Eduardo", "Prof. Erika", "Prof. Guilherme", "Prof. Helena",
    "Prof. Igor", "Prof. Juliana"
]

disciplinas_por_periodo = {
    1: ["POO Java", "L√≥gica", "Web I", "Banco I", "Redes I"],
    2: ["Estrutura Dados", "Engenharia Soft I", "Mobile", "Banco II", "Web II"],
    3: ["Engenharia Soft II", "Compiladores", "Sistemas Operacionais", "Gest√£o TI", "√âtica TI"],
    4: ["IA", "Seguran√ßa Info", "Projeto Integrador", "Empreendedorismo", "Inova√ß√£o TI"],
    5: ["TCC", "L√≥gica Prog II", "Redes II", "Frameworks Web", "DevOps"]
}

def associar_prof_materia():
    prof_materia = []
    codigo_materia = 1
    
    # Contador de mat√©rias por professor para distribui√ß√£o igualit√°ria
    contador_materias_prof = {prof: 0 for prof in professores}
    
    # Total de mat√©rias: 5 per√≠odos √ó 5 mat√©rias = 25 mat√©rias
    # 10 professores, ent√£o idealmente cada professor deveria ter 2-3 mat√©rias
    
    for periodo in range(1, 6):
        disciplinas = disciplinas_por_periodo[periodo]
        prof_usados_periodo = []  # Professores j√° usados neste per√≠odo
        
        for nome_materia in disciplinas:
            # Lista de professores dispon√≠veis (n√£o usados neste per√≠odo)
            profs_disponiveis = [p for p in professores if p not in prof_usados_periodo]
            
            # Entre os dispon√≠veis, prioriza quem tem menos mat√©rias atribu√≠das
            profs_disponiveis.sort(key=lambda p: contador_materias_prof[p])
            
            # Pega o professor com menos mat√©rias (ou aleat√≥rio entre os que t√™m menos)
            min_materias = contador_materias_prof[profs_disponiveis[0]]
            profs_com_menos_materias = [p for p in profs_disponiveis 
                                      if contador_materias_prof[p] == min_materias]
            
            prof_escolhido = random.choice(profs_com_menos_materias)
            
            # Atualiza contadores e listas
            prof_usados_periodo.append(prof_escolhido)
            contador_materias_prof[prof_escolhido] += 1
            
            # Gera c√≥digos
            cod_materia = str(codigo_materia).zfill(2)
            cod_professor = str(professores.index(prof_escolhido) + 1).zfill(2)
            cod_combinado = f"{periodo}{cod_materia}{cod_professor}"

            prof_materia.append({
                "periodo": periodo,
                "nome_materia": nome_materia,
                "cod_materia": cod_materia,
                "cod_professor": cod_professor,
                "cod_combinado": cod_combinado,
                "professor": prof_escolhido
            })
            codigo_materia += 1
        
    # Debug: mostra a distribui√ß√£o final
    print("üìä Distribui√ß√£o de mat√©rias por professor:")
    for prof in professores:
        materias_prof = [item for item in prof_materia if item["professor"] == prof]
        print(f"{prof}: {len(materias_prof)} mat√©rias - {[m['nome_materia'] for m in materias_prof]}")
    
    return prof_materia

if __name__ == "__main__":
    print("Testando a distribui√ß√£o igualit√°ria de mat√©rias...\n")
    resultado = associar_prof_materia()
    
    print(f"\nTotal de mat√©rias distribu√≠das: {len(resultado)}")
    print("‚úÖ Teste conclu√≠do!")
